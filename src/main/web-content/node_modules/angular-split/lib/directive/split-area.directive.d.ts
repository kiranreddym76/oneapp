import { ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { SplitComponent } from '../component/split.component';
import { IAreaSize } from '../interface';
import * as i0 from "@angular/core";
export declare class SplitAreaDirective implements OnInit, OnDestroy {
    private ngZone;
    elRef: ElementRef;
    private renderer;
    private split;
    private _order;
    set order(v: number | `${number}` | null | undefined);
    get order(): number | null;
    private _size;
    set size(v: IAreaSize | `${number}` | null | undefined);
    get size(): IAreaSize;
    private _minSize;
    set minSize(v: number | `${number}` | null | undefined);
    get minSize(): number | null;
    private _maxSize;
    set maxSize(v: number | `${number}` | null | undefined);
    get maxSize(): number | null;
    private _lockSize;
    set lockSize(v: boolean | `${boolean}`);
    get lockSize(): boolean;
    private _visible;
    set visible(v: boolean | `${boolean}`);
    get visible(): boolean;
    private transitionListener;
    private dragStartSubscription;
    private dragEndSubscription;
    private readonly lockListeners;
    constructor(ngZone: NgZone, elRef: ElementRef, renderer: Renderer2, split: SplitComponent);
    ngOnInit(): void;
    setStyleOrder(value: number): void;
    setStyleFlex(grow: number, shrink: number, basis: string, isMin: boolean, isMax: boolean): void;
    lockEvents(): void;
    unlockEvents(): void;
    ngOnDestroy(): void;
    collapse(newSize?: number, gutter?: 'left' | 'right'): void;
    expand(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SplitAreaDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SplitAreaDirective, "as-split-area, [as-split-area]", ["asSplitArea"], { "order": { "alias": "order"; "required": false; }; "size": { "alias": "size"; "required": false; }; "minSize": { "alias": "minSize"; "required": false; }; "maxSize": { "alias": "maxSize"; "required": false; }; "lockSize": { "alias": "lockSize"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; }, {}, never, never, false, never>;
}
